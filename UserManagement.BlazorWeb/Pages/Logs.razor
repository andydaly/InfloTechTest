@page "/logs"
@attribute [Authorize]
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Authorization
@using UserManagement.BlazorWeb.Dtos
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject HttpClient Http

<h1 class="mb-3">Logs</h1>

@if (!string.IsNullOrWhiteSpace(_error))
{
    <div class="alert alert-danger">@_error</div>
}

<div class="d-flex align-items-center gap-2 mb-3">
    <input class="form-control" style="max-width: 340px"
           placeholder="Search (details, performed by, action, userId)…"
           @bind="_q" @bind:event="oninput" />
    <button class="btn btn-primary" @onclick="Search">Search</button>

    <div class="ms-auto d-flex align-items-center gap-2">
        <label class="form-label mb-0 me-1">Page size</label>
        <select class="form-select" style="width: 100px" @onchange="OnPageSizeChanged" value="@_pageSize">
            <option value="10">10</option>
            <option value="25">25</option>
            <option value="50">50</option>
            <option value="100">100</option>
        </select>
    </div>
</div>

<div class="table-responsive">
    <table class="table table-striped align-middle">
        <thead>
            <tr>
                <th style="width: 1px;">Id</th>
                <th>When</th>
                <th>User</th>
                <th>Action</th>
                <th>Performed By</th>
                <th>Details</th>
                <th style="width:1px;"></th>
            </tr>
        </thead>
        <tbody>
            @if (_loading)
            {
                <tr><td colspan="7">Loading…</td></tr>
            }
            else if (_items.Count == 0)
            {
                <tr><td colspan="7" class="text-muted">No log entries found.</td></tr>
            }
            else
            {
                @foreach (var l in _items)
                {
                    <tr class="@(l.Id == _selected?.Id ? "table-primary" : null)">
                        <td>@l.Id</td>
                        <td>@l.OccurredAt.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>@l.UserId</td>
                        <td>@l.Action</td>
                        <td>@(string.IsNullOrWhiteSpace(l.PerformedBy) ? "-" : l.PerformedBy)</td>
                        <td class="text-truncate" style="max-width: 360px;">@l.Details</td>
                        <td>
                            <a class="btn btn-sm btn-outline-secondary" href="@($"/logs/{l.Id}")">Details</a>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@if (_selected is not null)
{
    <div class="card mt-3">
        <div class="card-header d-flex align-items-center">
            <strong>Log #@_selected.Id</strong>
            <button class="btn btn-sm btn-outline-secondary ms-auto" @onclick="() => _selected = null">Close</button>
        </div>
        <div class="card-body">
            <dl class="row mb-0">
                <dt class="col-sm-3">When</dt>
                <dd class="col-sm-9">@_selected.OccurredAt.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</dd>
                <dt class="col-sm-3">User</dt>
                <dd class="col-sm-9">@_selected.UserId</dd>
                <dt class="col-sm-3">Action</dt>
                <dd class="col-sm-9">@_selected.Action</dd>
                <dt class="col-sm-3">Performed By</dt>
                <dd class="col-sm-9">@(_selected.PerformedBy ?? "-")</dd>
                <dt class="col-sm-3">Details</dt>
                <dd class="col-sm-9">@(_selected.Details ?? "-")</dd>
            </dl>
        </div>
    </div>
}

<div class="d-flex align-items-center gap-2 mt-3">
    <div class="text-muted">
        Showing @StartRow–@EndRow of @_total
    </div>

    @if (_totalPages > 1)
    {
        <nav class="ms-auto">
            <ul class="pagination mb-0">
                <li class="page-item @( _page == 1 ? "disabled" : null )">
                    <button class="page-link" @onclick="() => GoToPage(_page - 1)">Prev</button>
                </li>

                @foreach (var p in VisiblePages())
                {
                    <li class="page-item @( _page == p ? "active" : null )">
                        <button class="page-link" @onclick="() => GoToPage(p)">@p</button>
                    </li>
                }

                <li class="page-item @( _page == _totalPages ? "disabled" : null )">
                    <button class="page-link" @onclick="() => GoToPage(_page + 1)">Next</button>
                </li>
            </ul>
        </nav>
    }
</div>

@code {
    private List<UserLogDto> _items = new();
    private UserLogDto? _selected;
    private int _page = 1;
    private int _pageSize = 25;
    private int _total = 0;
    private int _totalPages => Math.Max(1, (int)Math.Ceiling(_total / (double)_pageSize));
    private string? _q;
    private bool _loading;
    private string? _error;

    private int StartRow => _total == 0 ? 0 : ((_page - 1) * _pageSize) + 1;
    private int EndRow => Math.Min(_page * _pageSize, _total);

    

    protected override async Task OnInitializedAsync()
        => await Load();

    private async Task Load(int? goToPage = null)
    {
        _loading = true;
        _error = null;
        try
        {
            if (goToPage.HasValue) _page = goToPage.Value;

            var url = $"logs?page={_page}&pageSize={_pageSize}";
            if (!string.IsNullOrWhiteSpace(_q))
                url += $"&q={Uri.EscapeDataString(_q)}";

            var res = await Http.GetFromJsonAsync<LogListResponse>(url);
            _items = res?.Items?.ToList() ?? new();
            _total = res?.Total ?? 0;

            if (_page > _totalPages && _totalPages > 0)
            {
                _page = _totalPages;
                await Load();
            }
        }
        catch (Exception ex)
        {
            _error = ex.Message;
            _items.Clear();
            _total = 0;
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task Search()
        => await Load(goToPage: 1);

    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e?.Value?.ToString(), out var size) && size > 0)
            _pageSize = size;
        await Load(goToPage: 1);
    }

    private IEnumerable<int> VisiblePages()
    {
        var start = Math.Max(1, _page - 2);
        var end = Math.Min(_totalPages, start + 4);
        if (end - start < 4) start = Math.Max(1, end - 4);
        for (var i = start; i <= end; i++) yield return i;
    }

    private async Task GoToPage(int p)
    {
        if (p < 1 || p > _totalPages || p == _page) return;
        await Load(goToPage: p);
    }

    private async Task ShowDetails(long id)
    {
        try
        {
            _selected = await Http.GetFromJsonAsync<UserLogDto>($"logs/{id}");
        }
        catch (Exception ex)
        {
            _selected = null;
            _error = $"Failed to load details: {ex.Message}";
        }
    }
}
