@page "/users"
@attribute [Authorize]
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Authorization
@using UserManagement.BlazorWeb.Dtos
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS

<h2 class="mb-3">User List</h2>

@if (!string.IsNullOrWhiteSpace(_error))
{
    <div class="alert alert-danger">@_error</div>
}

<div class="table-responsive">
    <table class="table table-striped table-hover align-middle">
        <thead>
            <tr>
                <th>Id</th>
                <th>Forename</th>
                <th>Surname</th>
                <th>Email</th>
                <th>Date of Birth</th>
                <th>Password</th>
                <th>Account Active</th>
                <th style="width:1px;"></th>
            </tr>
        </thead>

        <tbody>
            @if (_users is null)
            {
                <tr><td colspan="7">Loading…</td></tr>
            }
            else if (_users.Count == 0)
            {
                <tr><td colspan="7" class="text-muted">No users found.</td></tr>
            }
            else
            {
                @foreach (var item in _users)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Forename</td>
                        <td>@item.Surname</td>
                        <td>@item.Email</td>
                        <td>@(item.DateOfBirth.HasValue? item.DateOfBirth.Value.ToString("yyyy-MM-dd") : "")</td>
                        <td>@Mask(item.Password)</td>
                        <td>
                            @if (item.IsActive)
                            {
                                <span class="badge badge-active">Active</span>
                            }
                            else
                            {
                                <span class="badge badge-inactive">Inactive</span>
                            }
                        </td>
                        <td>
                            <div class="dropdown text-end">
                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                    Actions
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li><a class="dropdown-item" href="@($"/users/details/{item.Id}")">View</a></li>
                                    <li><a class="dropdown-item" href="@($"/users/edit/{item.Id}")">Edit</a></li>
                                    <li><button class="dropdown-item text-danger" @onclick="() => Delete(item.Id)">Delete</button></li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<div class="mb-3 d-flex align-items-center">
    <div class="btn-group filter-group" role="group" aria-label="Filter">
        <button class="@FilterBtnClass(AllFilter)" @onclick="@(() => SetFilter(AllFilter))">Show All</button>
        <button class="@FilterBtnClass(ActiveFilter)" @onclick="@(() => SetFilter(ActiveFilter))">Active Only</button>
        <button class="@FilterBtnClass(InactiveFilter)" @onclick="@(() => SetFilter(InactiveFilter))">Non Active</button>
    </div>
    <span class="ms-3">Current filter: @_filter</span>

    <a href="/users/create" class="btn btn-primary ms-auto">Add User</a>
</div>

@code {
    private List<UserDto>? _users;
    private string _filter = "all";
    private string? _error;
    private const string AllFilter = "all";
    private const string ActiveFilter = "active";
    private const string InactiveFilter = "inactive";

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private string FilterBtnClass(string key)
    => $"btn btn-outline-secondary{(string.Equals(_filter, key, StringComparison.OrdinalIgnoreCase) ? " active" : "")}";

    private static string Mask(string? value)
      => string.IsNullOrEmpty(value) ? "" : new string('•', Math.Clamp(value.Length, 8, 12));

    private async Task Load()
    {
        try
        {
            _error = null;
            if (_filter == "active")
                _users = await Http.GetFromJsonAsync<List<UserDto>>("users/active/true");
            else if (_filter == "inactive")
                _users = await Http.GetFromJsonAsync<List<UserDto>>("users/active/false");
            else
                _users = await Http.GetFromJsonAsync<List<UserDto>>("users");
        }
        catch (Exception ex)
        {
            _error = ex.Message;
            _users = new();
        }
    }

    private async Task Delete(long id)
    {
        var ok = await JS.InvokeAsync<bool>("confirm", $"Delete user #{id}?");
        if (!ok) return;

        var resp = await Http.DeleteAsync($"users/{id}");
        if (!resp.IsSuccessStatusCode)
        {
            _error = $"Delete failed: {(int)resp.StatusCode} {resp.ReasonPhrase}";
        }
        await Load();
    }

    private async Task SetFilter(string filter)
    {
        _filter = filter;
        await Load();
    }
}
